from discord.ext import commands
import discord
import os
import aiosqlite

from mtd.modules import first_run
from mtd.modules import permissions
from mtd.manifest import VERSION
from mtd.manifest import CONTRIBUTORS

from mtd.modules.storage_management import database_file
from mtd.modules.connections import bot_token


if os.environ.get('MTD_PREFIX'):
    command_prefix = os.environ.get('MTD_PREFIX')
else:
    command_prefix = "!"

initial_extensions = [
    "mtd.cogs.BotManagement",
    "mtd.cogs.ContestSetup",
    "mtd.cogs.ContestTools",
    "mtd.cogs.DMManagement",
    "mtd.cogs.Participation",
]

intents = discord.Intents.default()
intents.members = True
intents.message_content = True


class MTD(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.background_tasks = []

        self.app_version = VERSION
        self.project_contributors = CONTRIBUTORS

        self.description = f"MTD {self.app_version}"
        self.database_file = database_file
        self.db = None
        self.representing_guild = None

    async def setup_hook(self):
        self.db = await aiosqlite.connect(self.database_file)

        await first_run.ensure_tables(self.db)
        await first_run.add_admins(self)
        await permissions.load_users(self.db)

        async with self.db.execute("SELECT extension_name FROM user_extensions") as cursor:
            user_extensions = await cursor.fetchall()

        for extension in initial_extensions:
            await self.load_extension(extension)

        for user_extension in user_extensions:
            try:
                await self.load_extension(user_extension[0])
                print(f"User extension {user_extension[0]} loaded")
            except discord.ext.commands.errors.ExtensionNotFound as ex:
                print(ex)

        async with self.db.execute("SELECT value FROM contest_config_int WHERE key = ?",
                                   ["representing_guild"]) as cursor:
            representing_guild_db = await cursor.fetchone()

        if representing_guild_db:
            self.representing_guild = self.get_guild(int(representing_guild_db[0]))
            if self.representing_guild:
                print(f"Acting on behalf of {self.representing_guild.name}")

    async def close(self):
        # Cancel all Task object generated by cogs.
        # This prevents any task still running due to having long sleep time.
        for task in self.background_tasks:
            task.cancel()

        # Close connection to the database
        if self.db:
            await self.db.close()

        # Run actual discord.py close.
        # await super().close()

        # for now let's just quit() since the thing above does not work :c
        quit()

    async def on_ready(self):
        print("Logged in as")
        print(self.user.name)
        print(self.user.id)
        print("------")


client = MTD(command_prefix=command_prefix, intents=intents)
client.run(bot_token)
